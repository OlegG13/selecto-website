
;(function () {

    $('.material__field').on('focus', function () {
        $(this).next('.material__label').addClass('active');
    });
    $('.material__field').on('blur', function () {
        var $this = $(this);
        if (!$this.val()) {
            $this.next('.material__label').removeClass('active');
        }
    });

    //textarea auto height

        function adjustHeight(el, minHeight) {
            // compute the height difference which is caused by border and outline
            var outerHeight = parseInt(window.getComputedStyle(el).height, 10);
            var diff = outerHeight - el.clientHeight;

            // set the height to 0 in case of it has to be shrinked
            el.style.height = 0;

            // set the correct height
            // el.scrollHeight is the full height of the content, not just the visible part
            el.style.height = Math.max(minHeight, el.scrollHeight + diff) + 'px';
        }


        // we use the "data-adaptheight" attribute as a marker
        var textAreas = [].slice.call(document.querySelectorAll('textarea[data-adaptheight]'));

        // iterate through all the textareas on the page
        textAreas.forEach(function (el) {

            // we need box-sizing: border-box, if the textarea has padding
            el.style.boxSizing = el.style.mozBoxSizing = 'border-box';

            // we don't need any scrollbars, do we? :)
            el.style.overflowY = 'hidden';

            // the minimum height initiated through the "rows" attribute
            var minHeight = el.scrollHeight;

            el.addEventListener('input', function () {
                adjustHeight(el, minHeight);
            });

            // we have to readjust when window size changes (e.g. orientation change)
            window.addEventListener('resize', function () {
                adjustHeight(el, minHeight);
            });

            // we adjust height to the initial content
            adjustHeight(el, minHeight);

        });


})();
var app = {
    dom: {
        $alert: $('.alert')
    }
};
app.dom.$contact_form = $('.js-popup__content__form');

function sendMail($form) {
    var formData = $form.serializeObject();
    //var $spinner = $form.find('.fa-spinner').addClass('is-show');
    fetch('/php/mail.php', {
            method: 'POST',
            headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        }).then(res => {
        //$spinner.removeClass('is-show');
            if (res.ok) {
                TweenMax.fromTo(app.dom.$alert, 0.3, {
                    display: 'none',
                    y: '-100%',
                    opacity: 0,
                    className: '-=alert--danger'
                }, {display: 'block', y: '0%', opacity: 1, className: '+=alert--success'});

                app.dom.$alert.html('Success');

                setTimeout(() => {
                    TweenMax.to(app.dom.$alert, 0.3, {y: '-100%', opacity: 0});
                }, 3000);
            } else {
            TweenMax.fromTo(app.dom.$alert, 0.3, {
                display: 'none',
                y: '-100%',
                opacity: 0,
                className: '-=alert--success'
            }, {display: 'block', y: '0%', opacity: 1, className: '+=alert--danger'});
            app.dom.$alert.html('Error');
            setTimeout(() => {
                TweenMax.to(app.dom.$alert, 0.3, {y: '-100%', opacity: 0});
            }, 3000);
        }
    })
}

(function (dom) {
    var rules_contact = {
        name: "required",
        email: {
            required: true,
            email: true
        }
    };
    dom.$contact_form.validate({
        rules: rules_contact,
        errorPlacement: function (error, element) {
            return true;
        }
    });
    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };
    dom.$contact_form.on('submit', function (e) {
        e.preventDefault();
        var $this = $(this);
        if ($this.valid()) {
            sendMail($this);
        }
        //console.log("Submit");
    });
})(app.dom);
;(function($){

    // hero animation
    //var options = {"particles":{"number":{"value":99,"density":{"enable":true,"value_area":552.4033491425909}},"color":{"value":"#ffffff"},"shape":{"type":"circle","stroke":{"width":0,"color":"#000000"},"polygon":{"nb_sides":3},"image":{"src":"img/github.svg","width":70,"height":100}},"opacity":{"value":1,"random":true,"anim":{"enable":false,"speed":1,"opacity_min":0.1,"sync":false}},"size":{"value":2,"random":true,"anim":{"enable":false,"speed":40,"size_min":0.1,"sync":false}},"line_linked":{"enable":false,"distance":150,"color":"#ffffff","opacity":0.4,"width":1},"move":{"enable":true,"speed":1.5782952832645452,"direction":"none","random":true,"straight":false,"out_mode":"out","bounce":false,"attract":{"enable":false,"rotateX":600,"rotateY":1200}}},"interactivity":{"detect_on":"canvas","events":{"onhover":{"enable":false,"mode":"repulse"},"onclick":{"enable":true,"mode":"repulse"},"resize":true},"modes":{"grab":{"distance":400,"line_linked":{"opacity":1}},"bubble":{"distance":400,"size":40,"duration":2,"opacity":8,"speed":3},"repulse":{"distance":200,"duration":0.4},"push":{"particles_nb":4},"remove":{"particles_nb":2}}},"retina_detect":false};

    var options = {
        "particles": {
            "number": {
                "value": 43,
                "density": {
                    "enable": true,
                    "value_area": 868.0624057955
                }
            },
            "color": {
                "value": "#a0b6ff"
            },
            "shape": {
                "type": "circle",
                "stroke": {
                    "width": 0,
                    "color": "#000000"
                },
                "polygon": {
                    "nb_sides": 5
                },
                "image": {
                    "src": "img/github.svg",
                    "width": 100,
                    "height": 100
                }
            },
            "opacity": {
                "value": 0.5,
                "random": false,
                "anim": {
                    "enable": false,
                    "speed": 1,
                    "opacity_min": 0.1,
                    "sync": false
                }
            },
            "size": {
                "value": 2,
                "random": true,
                "anim": {
                    "enable": false,
                    "speed": 7.192807192807193,
                    "size_min": 0.1,
                    "sync": false
                }
            },
            "line_linked": {
                "enable": true,
                "distance": 150,
                "color": "#5b69a7",
                "opacity": 0.14993805191013182,
                "width": 0.5
            },
            "move": {
                "enable": true,
                "speed": 0.5,
                "direction": "none",
                "random": true,
                "straight": false,
                "out_mode": "out",
                "bounce": false,
                "attract": {
                    "enable": false,
                    "rotateX": 600,
                    "rotateY": 1200
                }
            }
        },
        "interactivity": {
            "detect_on": "canvas",
            "events": {
                "onhover": {
                    "enable": true,
                    "mode": "grab"
                },
                "onclick": {
                    "enable": false,
                    "mode": "push"
                },
                "resize": true
            },
            "modes": {
                "grab": {
                    "distance": 400,
                    "line_linked": {
                        "opacity": 1
                    }
                },
                "bubble": {
                    "distance": 400,
                    "size": 40,
                    "duration": 2,
                    "opacity": 8,
                    "speed": 3
                },
                "repulse": {
                    "distance": 200,
                    "duration": 0.4
                },
                "push": {
                    "particles_nb": 4
                },
                "remove": {
                    "particles_nb": 2
                }
            }
        },
        "retina_detect": true
    };


    if (document.getElementById("particlesJS") !== null) {
        particlesJS("particlesJS", options);
    }

})(jQuery);






var menu = (function () {

    var $menuFrame = $('.menu'),
        $menuBtn = $('[data-btn-mobile-menu]'),
        $menuTopLine = $menuBtn.find('.mobile-menu-btn__line--top'),
        $menuMidLine = $menuBtn.find('.mobile-menu-btn__line--mid'),
        $menuBotLine = $menuBtn.find('.mobile-menu-btn__line--bot'),
        $menuAllLine = $menuBtn.find('.mobile-menu-btn__line'),
        $header = $('.page__header'),
        $logo = $('.logo'),
        $page = $('.page'),
        isOpen = false,
        screenWidth = 0;

    function screenW() {
        screenWidth = screen.width;
    }

    $( window ).on("resize", function() {
        screenW();
    }).resize();

    $(document).keyup(function(e) {
        if (e.keyCode == 27) {
            closeMenu();
        }
    });

    function openMenu() {
        _reverseStatus();
        $menuTopLine.addClass('mobile-menu-btn__line--top-active');
        $menuMidLine.addClass('mobile-menu-btn__line--mid-active');
        $menuBotLine.addClass('mobile-menu-btn__line--bot-active');
        //$menuAllLine.removeClass('mobile-menu-btn__line--dark');
        $logo.addClass('logo--menu');
        $header.css("width", screenWidth).addClass('page__header--menu-open');
        $menuFrame.addClass('menu--open');
        $page.css("overflow", "hidden");
    }

    function closeMenu() {
        _reverseStatus();
        $menuTopLine.removeClass('mobile-menu-btn__line--top-active');
        $menuMidLine.removeClass('mobile-menu-btn__line--mid-active');
        $menuBotLine.removeClass('mobile-menu-btn__line--bot-active');
        //$menuAllLine.addClass('mobile-menu-btn__line--dark');
        $logo.removeClass('logo--menu');
        $header.css("width", "auto").removeClass('page__header--menu-open');
        $menuFrame.removeClass('menu--open');
        $page.css("overflow", "visible");
    }
    
    function _reverseStatus() {
        isOpen = !isOpen;
    }


    function _init() {
        if (isOpen === true) {
            closeMenu();
        } else {
            openMenu();
        }
    }

    $menuBtn.on('click', function () {
       _init();
    });

    return {
        open: openMenu,
        close: closeMenu
    }
})();
;(function() {

    function AnimationFactory() {
        this.controller = new ScrollMagic.Controller();
        this.scenes = [];
    }

    AnimationFactory.prototype = {

        controller: null,

        scenes: null,

        constructor: AnimationFactory,

        createAnimation: function(element, args) {

            element = typeof element === "string"
                ? document.getElementById(element)
                : element;

            var tween = TweenMax.to(element, args.tween.duration, args.tween.options),
                scene = new ScrollMagic.Scene(args.scene.options);

            scene.setTween(tween)
            .addTo(this.controller)
            .on('start', function () {
                if (element.getAttribute("data-animation") === 'ourSolutionCount') {
                    setTimeout(projectCount.start.bind(projectCount), 100);
                    setTimeout(yearsCount.start.bind(yearsCount), 400);
                    setTimeout(peopleCount.start.bind(peopleCount), 700);
                    setTimeout(officesCount.start.bind(officesCount), 1000);
                }
                if (element.getAttribute("data-animation") === 'ourSolution') {
                    setTimeout(projectCount.start.bind(projectCount), 100);
                    setTimeout(yearsCount.start.bind(yearsCount), 400);
                    setTimeout(countryCount.start.bind(countryCount), 700);
                    setTimeout(officesCount.start.bind(officesCount), 1000);
                }
                if (element.getAttribute("data-animation") === 'lifeCount') {
                    setTimeout(joinedLifeCount.start.bind(joinedLifeCount), 100);
                    setTimeout(platformsLifeCount.start.bind(platformsLifeCount), 400);
                    setTimeout(peopleLifeCount.start.bind(peopleLifeCount), 700);
                    setTimeout(publicationsLifeCount.start.bind(publicationsLifeCount), 1000);
                }
                if (element.getAttribute("data-animation") === 'msfitCount') {
                    setTimeout(joinedMsfitCount.start.bind(joinedMsfitCount), 100);
                    setTimeout(platformsMsfitCount.start.bind(platformsMsfitCount), 400);
                    setTimeout(peopleMsfitCount.start.bind(peopleMsfitCount), 700);
                    setTimeout(publicationsMsfitCount.start.bind(publicationsMsfitCount), 1000);
                }

                if (element.getAttribute("data-animation") === 'sproutCount') {
                    setTimeout(joinedSproutCount.start.bind(joinedSproutCount), 100);
                    setTimeout(platformsSproutCount.start.bind(platformsSproutCount), 400);
                    setTimeout(peopleSproutCount.start.bind(peopleSproutCount), 700);
                    setTimeout(publicationsSproutCount.start.bind(publicationsSproutCount), 1000);
                }


            });
            //scene.addIndicators();

            this.scenes.push(scene);

            return this;
        },

        createAnimations: function(element) {
            var tween = null,
                scene = null,
                elements = element.querySelectorAll("[data-animation]"),
                i = 0,
                args,
                scenes = {
                    top: '{"tween": { "duration": 0.5, "options": { "opacity": 1 } }, "scene": { "options": { "offset": 0, "reverse": false } } }',
                    heroTitle: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "offset": 0, "reverse": true } } }',
                    heroBorder: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "offset": 0, "reverse": true } } }',
                    ourSolutionHead: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--count", "offset": -250, "reverse": false } } }',
                    ourSolutionText: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--count", "offset": -100, "reverse": false } } }',
                    ourSolutionCount: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--count", "offset": 0, "reverse": false } } }',
                    ourSolutionBtn: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--count", "offset": 100, "reverse": false } } }',

                    workWithHead: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--our-work", "offset": -200, "reverse": false } } }',
                    tableInfo: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--our-work", "offset": 0, "reverse": false } } }',
                    technologyList: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--our-work", "offset": 500, "reverse": false } } }',
                    brandsTop: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".brands", "offset": -350, "reverse": false } } }',
                    brandsBottom: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".brands", "offset": -50, "reverse": false } } }',
                    review: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".review", "offset": -300, "reverse": false } } }',
                    blogHead: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--blog", "offset": -200, "reverse": false } } }',
                    blog: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--blog", "offset": -100, "reverse": false } } }',
                    startProject: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".action-project", "offset": -250, "reverse": false } } }',
                    footer: '{"tween": { "duration": 0.5, "options": { "y": 0 } }, "scene": { "options": { "triggerElement": ".footer", "offset": -550, "reverse": false } } }',

                    aboutSelecto: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--about", "offset": -200, "reverse": false } } }',
                    columns: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--about", "offset": 0, "reverse": false } } }',
                    ourSolution: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--map", "offset": 869, "reverse": false } } }',
                    mapTitle: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--map", "offset": -200, "reverse": false } } }',
                    principlesTitle: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--map", "offset": -200, "reverse": false } } }',

                    lifeCount: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--result", "offset": 220, "reverse": false } } }',
                    msfitCount: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--result", "offset": 220, "reverse": false } } }',
                    sproutCount: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "triggerElement": ".page__section--result", "offset": 220, "reverse": false } } }',
                    menu: '{"tween": { "duration": 0.5, "options": { "opacity": 1, "y": 0 } }, "scene": { "options": { "offset": 790, "reverse": true } } }',
                    msfitcases: '{"tween": { "duration": 0.5, "options": { "opacity": 1 } }, "scene": { "options": { "offset": 0, "reverse": false } } }',
                    sproutcases: '{"tween": { "duration": 0.5, "options": { "opacity": 1 } }, "scene": { "options": { "offset": 0, "reverse": false } } }',
                    lifecases: '{"tween": { "duration": 0.5, "options": { "opacity": 1 } }, "scene": { "options": { "offset": 0, "reverse": false } } }',
                    dopecases: '{"tween": { "duration": 0.5, "options": { "opacity": 1 } }, "scene": { "options": { "offset": 0, "reverse": false } } }'
                };

            for (i; i < elements.length; i++) {

                    var animateElName = elements[i].getAttribute("data-animation");
                    args = JSON.parse(scenes[animateElName]);
                    this.createAnimation(elements[i], args);

            }
        }

    };

    var animationFactory = new AnimationFactory();

    window.onload = function() {
        animationFactory.createAnimations(document.body);
    };


})();

(function ($) {

    var screenW = screen.width;

    // Init ScrollMagic
    var controller = new ScrollMagic.Controller();

    // get all slides
    //var slides = [".page__top", ".page__section--count", ".page__section--our-work"];

    // get all headers in slides that trigger animation
    //var headers = [".page__top page__header--main", ".page__section--count .main-article__head--main", "#slide03 header"];

    // get all break up sections
    var breakSections = ["#particlesJS"];

    // Enable ScrollMagic only for desktop, disable on touch and mobile devices

        // move bcg container when intro gets out of the the view
        var introTl = new TimelineMax();

        introTl
            //.to($('.page__top header, .scroll-hint'), 0.2, {autoAlpha: 0, ease:Power0.easeNone})
            .to($('#particlesJS'), 0.2, {autoAlpha: 0, ease:Power0.easeNone}, '-=0.01');
            //.to($('#particlesJS .hero__title'), 1.4, {y: '10%', ease:Power1.easeOut}, '-=0.2');

        var introScene = new ScrollMagic.Scene({
            triggerElement: '#particlesJS',
            triggerHook: 0,
            offset: 0,
            duration: "100%"
        }).setTween(introTl)
            .addTo(controller);

        /* First slide. Begin */
        breakSections.forEach(function (breakSection, index) {

            // number for highlighting scenes
            var breakID = $(breakSection).attr('id');

            console.log(breakID);

            // make scene
            var breakScene = new ScrollMagic.Scene({
                triggerElement: breakSection, // trigger CSS animation when header is in the middle of the viewport
                triggerHook: 0.75
            }).setClassToggle('#'+breakID, 'is-active')
                .addTo(controller);
        });
        /* First slide. End */



}(jQuery));

var select = (function () {

    var $select = $('.select'),
        $dropDown = $select.find('.select__drop'),
        $dropDownItem = $select.find('.select__item'),
        $selectInput = $select.find('.select__input'),
        $selectBtn = $select.find('.select__title');

    function openSelect() {
        $dropDown.slideDown(300);
        $selectBtn.addClass("select__title--active");
    }

    function closeSelect() {
        $dropDown.slideUp(300);
        $selectBtn.removeClass("select__title--active");
    }

    function selectSelect() {
        var selectItemTitle = this.innerHTML;
        var selectItemVal = this.getAttribute("data-select-val");
        $selectInput.val(selectItemVal);
        $selectBtn.html(selectItemTitle);
        closeSelect();
    }

    $selectBtn.on('click', function () {
        openSelect();
        console.log(this);
    });

    $dropDownItem.on('click', selectSelect);

    $(document).mouseup(function (e){
        if (!$select.is(e.target)
            && $select.has(e.target).length === 0) {
            closeSelect()
        }
    });

})();
;(function($){

	$.slickSlider = {

		getCols: function(slide){
			var breakpoints = [768,992,1200];
			var cols = slide ? slide.split(',') : false;

			if($.isArray(cols)){
				cols.shift();
				if(cols.length > 0){
					return $.map(cols, function(value, index){
						return {
							breakpoint: breakpoints[index],
							settings: {
								slidesToShow: parseInt(value)
							}
						}
					});
				}else{
					return false;
				}	  
			}else{
				return false;
			}
		},
		getFirstCol: function(slide){
			var cols = slide ? slide.split(',') : false;
			if(cols){
				return parseInt(slide.split(',')[0]);
			}else{
				return 2;
			}
		}
	}
	
})(jQuery);
;(function () {

    var sliders = $('[data-slider="review"]');

    sliders.each(function () {

        var scope = $(this);
        var slides = $('[data-slider-slides]', scope).attr('data-slider-slides');

        $('[data-slider-slides]', scope).find('[data-slider-slide]').css('float', 'left').end().slick({
            dots: false,
            arrows: true,
            infinite: false,
            adaptiveHeight: false,
            slidesToShow: $.slickSlider.getFirstCol(slides),
            autoplay: false,
            autoplaySpeed: 3000,
            swipeToSlide: true,
            mobileFirst: true,
            rows: 1,
            prevArrow: $('[data-slider-arrow-left]', scope).removeClass('slider__arrow--hidden'),
            nextArrow: $('[data-slider-arrow-right]', scope).removeClass('slider__arrow--hidden'),
            responsive: $.slickSlider.getCols(slides)
        });

    });

})();
if (document.getElementById("projects") !== null) {
    var project = {
        useEasing : true,
        useGrouping : true,
        separator : ',',
        decimal : '.',
        count: 60,
        id: "projects"
    };
    var projectCount = new CountUp(project.id, 0, project.count, 0, 2.5, project);
}
if (document.getElementById("years") !== null) {
    var years = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 3,
        id: "years"
    };
    var yearsCount = new CountUp(years.id, 0, years.count, 0, 2.5, years);
}
if (document.getElementById("people") !== null) {
    var people = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 50,
        id: "people"
    };
    var peopleCount = new CountUp(people.id, 0, people.count, 0, 2.5, people);
}
if (document.getElementById("offices") !== null) {
    var offices = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 2,
        id: "offices"
    };
    var officesCount = new CountUp(offices.id, 0, offices.count, 0, 2.5, offices);
}

if (document.getElementById("country") !== null) {
    var country = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 15,
        id: "country"
    };
    var countryCount = new CountUp(country.id, 0, country.count, 0, 2.5, country);
}
/* Cases */
/* Cases Life*/
if (document.getElementById("joined-life") !== null) {
    var joinedLife = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 150,
        id: "joined-life"
    };
    var joinedLifeCount = new CountUp(joinedLife.id, 0, joinedLife.count, 0, 2.5, joinedLife);
}

if (document.getElementById("platforms-life") !== null) {
    var platformsLife = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 3,
        id: "platforms-life"
    };
    var platformsLifeCount = new CountUp(platformsLife.id, 0, platformsLife.count, 0, 2.5, platformsLife);
}

if (document.getElementById("people-life") !== null) {
    var peopleLife = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 2.5,
        id: "people-life"
    };
    var peopleLifeCount = new CountUp(peopleLife.id, 0, peopleLife.count, 0, 2.5, peopleLife);
}

if (document.getElementById("publications-life") !== null) {
    var publicationsLife = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 5,
        id: "publications-life"
    };
    var publicationsLifeCount = new CountUp(publicationsLife.id, 0, publicationsLife.count, 0, 2.5, publicationsLife);
}

/* Cases Msfit*/

if (document.getElementById("joined-msfit") !== null) {
    var joinedMsfit = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 150,
        id: "joined-msfit"
    };
    var joinedMsfitCount = new CountUp(joinedMsfit.id, 0, joinedMsfit.count, 0, 2.5, joinedMsfit);
}

if (document.getElementById("platforms-msfit") !== null) {
    var platformsMsfit = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 3,
        id: "platforms-msfit"
    };
    var platformsMsfitCount = new CountUp(platformsMsfit.id, 0, platformsMsfit.count, 0, 2.5, platformsMsfit);
}

if (document.getElementById("people-msfit") !== null) {
    var peopleMsfit = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 2.5,
        id: "people-msfit"
    };
    var peopleMsfitCount = new CountUp(peopleMsfit.id, 0, peopleMsfit.count, 0, 2.5, peopleMsfit);
}

if (document.getElementById("publications-msfit") !== null) {
    var publicationsMsfit = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 5,
        id: "publications-life"
    };
    var publicationsMsfitCount = new CountUp(publicationsMsfit.id, 0, publicationsMsfit.count, 0, 2.5, publicationsMsfit);
}

/* Cases  Sprout */

if (document.getElementById("joined-sprout") !== null) {
    var joinedSprout = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 150,
        id: "joined-sprout"
    };
    var joinedSproutCount = new CountUp(joinedSprout.id, 0, joinedSprout.count, 0, 2.5, joinedSprout);
}

if (document.getElementById("platforms-sprout") !== null) {
    var platformsSprout = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 3,
        id: "platforms-sprout"
    };
    var platformsSproutCount = new CountUp(platformsSprout.id, 0, platformsSprout.count, 0, 2.5, platformsSprout);
}

if (document.getElementById("people-sprout") !== null) {
    var peopleSprout = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 2.5,
        id: "people-sprout"
    };
    var peopleSproutCount = new CountUp(peopleSprout.id, 0, peopleSprout.count, 0, 2.5, peopleSprout);
}

if (document.getElementById("publications-sprout") !== null) {
    var publicationsSprout = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        count: 5,
        id: "publications-sprout"
    };
    var publicationsSproutCount = new CountUp(publicationsSprout.id, 0, publicationsSprout.count, 0, 2.5, publicationsSprout);
}